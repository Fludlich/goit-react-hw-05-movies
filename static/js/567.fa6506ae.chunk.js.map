{"version":3,"file":"static/js/567.fa6506ae.chunk.js","mappings":"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","sources":["Pages/Movies/Movies.jsx","Services/services.jsx"],"sourcesContent":["import { Link, Outlet } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getMovieByName } from '../../Services/services';\nimport { useSearchParams } from 'react-router-dom';\nimport imgDefault from '../../defaultImg/imgDefault.png';\n\nexport function Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [inputValue, setInputValue] = useState('');\n  const [params, setParams] = useState('');\n  const [searchedMovie, setSearchedMovie] = useState([]);\n\n  const filmName = searchParams.get('query') ?? '';\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    if (filmName.length > 2 && params.length < 1) {\n      setInputValue(filmName);\n    }\n  }, [filmName, params.length]);\n\n  useEffect(() => {\n    if (params.length > 2) {\n      getMovieByName(params)\n        .then(response => {\n          setSearchedMovie(response.results);\n        })\n        .catch(error => console.log(error));\n    }\n  }, [params]);\n\n  const handlerForm = e => {\n    e.preventDefault();\n    setParams(inputValue.trim().toLowerCase());\n  };\n  const handlerInput = event => {\n    setInputValue(event.target.value);\n    updateQueryString(event.target.value);\n  };\n\n  return (\n    <div>\n      <form action=\"#\" onSubmit={handlerForm}>\n        <input type=\"text\" onChange={handlerInput} value={inputValue} />\n        <button type=\"submit\">Search</button>\n      </form>\n      {searchedMovie.length > 0 &&\n        (searchedMovie.length > 1 ? (\n          <ul style={{ display: 'flex', flexWrap: 'wrap', gap: '30px' }}>\n            {searchedMovie.map(({ id, original_title, poster_path, title }) => {\n              return (\n                <Link to={`${id}`} key={id}>\n                  <div>\n                    <img\n                      src={\n                        poster_path\n                          ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                          : imgDefault\n                      }\n                      alt={`${title}`}\n                      width=\"300\"\n                    />\n                    <h2> {original_title}</h2>\n                  </div>\n                </Link>\n              );\n            })}\n          </ul>\n        ) : (\n          <Link to={`${searchedMovie[0].id}`}>\n            <img\n              src={\n                searchedMovie[0].poster_path\n                  ? `https://image.tmdb.org/t/p/w500${searchedMovie[0].poster_path}`\n                  : imgDefault\n              }\n              alt={`${searchedMovie[0].title}`}\n              width=\"300\"\n            />\n            <h2> {searchedMovie[0].original_title}</h2>\n          </Link>\n        ))}\n\n      <Outlet />\n    </div>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = 'cc9feb50eaf7ec71b368044a87f5f06b';\nconst fetchApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/'});\n\nexport const getPopularMovies = async()=>{\n    const {data} = await fetchApi.get(`movie/popular?api_key=${API_KEY}&language=en-US&page=1` )\n    return data\n};\n\nexport const getMovieByName = async (query) => {\n    const { data } = await fetchApi.get(`search/movie?api_key=${API_KEY}&language=en-US&query=${query}`);\n    return data;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await fetchApi.get(`movie/${movieId}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const getCast = async movieId => {\n  const { data } = await fetchApi.get(`movie/${movieId}/credits?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const getReviews = async (movieId) => {\n  const { data } = await fetchApi.get(`movie/${movieId}/reviews?api_key=${API_KEY}`);\n  return data;\n};"],"names":["Movies","useSearchParams","searchParams","setSearchParams","useState","inputValue","setInputValue","params","setParams","searchedMovie","setSearchedMovie","filmName","get","useEffect","length","getMovieByName","then","response","results","catch","error","console","log","action","onSubmit","e","preventDefault","trim","toLowerCase","type","onChange","event","query","target","value","style","display","flexWrap","gap","map","id","original_title","poster_path","title","to","src","imgDefault","alt","width","API_KEY","fetchApi","axios","baseURL","getPopularMovies","data","getMovieById","movieId","getCast","getReviews"],"sourceRoot":""}